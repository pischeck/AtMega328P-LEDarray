
AtMega328P-LEDarray.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000200  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087c  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000724  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e4  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  9e:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <debounce>:
#define SPEED_MIN 100
#define SPEED_MAX 4000
#define SPEED_STEP 100

bool debounce(uint8_t pin) {
	if (!(PINC & (1 << pin))) {
  a6:	26 b1       	in	r18, 0x06	; 6
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	08 2e       	mov	r0, r24
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <debounce+0xc>
  ae:	35 95       	asr	r19
  b0:	27 95       	ror	r18
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <debounce+0x8>
  b6:	20 fd       	sbrc	r18, 0
  b8:	12 c0       	rjmp	.+36     	; 0xde <debounce+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	e7 e8       	ldi	r30, 0x87	; 135
  bc:	f3 e1       	ldi	r31, 0x13	; 19
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <debounce+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <debounce+0x1e>
  c4:	00 00       	nop
		_delay_ms(20);
		if (!(PINC & (1 << pin))) return true;
  c6:	26 b1       	in	r18, 0x06	; 6
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	a9 01       	movw	r20, r18
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <debounce+0x2c>
  ce:	55 95       	asr	r21
  d0:	47 95       	ror	r20
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <debounce+0x28>
  d6:	40 fd       	sbrc	r20, 0
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <debounce+0x3c>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	08 95       	ret
	}
	return false;
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret
  e2:	80 e0       	ldi	r24, 0x00	; 0
}
  e4:	08 95       	ret

000000e6 <moveLED>:

void moveLED(void) {
	PORTD = licznik;
  e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <licznik>
  ea:	8b b9       	out	0x0b, r24	; 11
	licznik <<= 1;
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <licznik>
  f0:	88 0f       	add	r24, r24
  f2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <licznik>
	if (licznik == 0x80) licznik = 0x03;
  f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <licznik>
  fa:	80 38       	cpi	r24, 0x80	; 128
  fc:	19 f4       	brne	.+6      	; 0x104 <moveLED+0x1e>
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <licznik>
 104:	08 95       	ret

00000106 <wait>:
}

void wait(void) {
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
	for (uint16_t i = 0; i < speed / 10; i++) { // podzia³ czasu na 10ms kroki
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	39 c0       	rjmp	.+114    	; 0x182 <wait+0x7c>
 110:	83 ec       	ldi	r24, 0xC3	; 195
 112:	99 e0       	ldi	r25, 0x09	; 9
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <wait+0xe>
 118:	00 c0       	rjmp	.+0      	; 0x11a <wait+0x14>
 11a:	00 00       	nop
		_delay_ms(10);
		if (debounce(SW_STOP)) startstop = false;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce>
 122:	81 11       	cpse	r24, r1
 124:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		if (debounce(SW_SPEED_UP)) {
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce>
 12e:	88 23       	and	r24, r24
 130:	89 f0       	breq	.+34     	; 0x154 <wait+0x4e>
			if (speed > SPEED_MIN + SPEED_STEP) speed -= SPEED_STEP;
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	89 3c       	cpi	r24, 0xC9	; 201
 13c:	91 05       	cpc	r25, r1
 13e:	50 f0       	brcs	.+20     	; 0x154 <wait+0x4e>
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	84 56       	subi	r24, 0x64	; 100
 14a:	91 09       	sbc	r25, r1
 14c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		if (debounce(SW_SPEED_DOWN)) {
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce>
 15a:	88 23       	and	r24, r24
 15c:	89 f0       	breq	.+34     	; 0x180 <wait+0x7a>
			if (speed < SPEED_MAX - SPEED_STEP) speed += SPEED_STEP;
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	8c 33       	cpi	r24, 0x3C	; 60
 168:	9f 40       	sbci	r25, 0x0F	; 15
 16a:	50 f4       	brcc	.+20     	; 0x180 <wait+0x7a>
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	8c 59       	subi	r24, 0x9C	; 156
 176:	9f 4f       	sbci	r25, 0xFF	; 255
 178:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	licznik <<= 1;
	if (licznik == 0x80) licznik = 0x03;
}

void wait(void) {
	for (uint16_t i = 0; i < speed / 10; i++) { // podzia³ czasu na 10ms kroki
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 186:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18a:	ad ec       	ldi	r26, 0xCD	; 205
 18c:	bc ec       	ldi	r27, 0xCC	; 204
 18e:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	c8 17       	cp	r28, r24
 1a0:	d9 07       	cpc	r29, r25
 1a2:	08 f4       	brcc	.+2      	; 0x1a6 <wait+0xa0>
 1a4:	b5 cf       	rjmp	.-150    	; 0x110 <wait+0xa>
		}
		if (debounce(SW_SPEED_DOWN)) {
			if (speed < SPEED_MAX - SPEED_STEP) speed += SPEED_STEP;
		}
	}
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <init>:

void init(void) {
	DDRD = 0xFF; // Port D jako wyjcie (LEDy)
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	8a b9       	out	0x0a, r24	; 10
	PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3); // wewnêtrzne pull-upy
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	8f 60       	ori	r24, 0x0F	; 15
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	08 95       	ret

000001b8 <main>:
}

int main(void) {
	init();
 1b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init>

	while (1) {
		if (startstop == true) {
 1bc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1c0:	88 23       	and	r24, r24
 1c2:	21 f0       	breq	.+8      	; 0x1cc <main+0x14>
			moveLED();
 1c4:	0e 94 73 00 	call	0xe6	; 0xe6 <moveLED>
			wait();
 1c8:	0e 94 83 00 	call	0x106	; 0x106 <wait>
		}
		if (debounce(SW_START)) startstop = true;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <debounce>
 1d2:	88 23       	and	r24, r24
 1d4:	99 f3       	breq	.-26     	; 0x1bc <main+0x4>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1dc:	ef cf       	rjmp	.-34     	; 0x1bc <main+0x4>

000001de <__umulhisi3>:
 1de:	a2 9f       	mul	r26, r18
 1e0:	b0 01       	movw	r22, r0
 1e2:	b3 9f       	mul	r27, r19
 1e4:	c0 01       	movw	r24, r0
 1e6:	a3 9f       	mul	r26, r19
 1e8:	70 0d       	add	r23, r0
 1ea:	81 1d       	adc	r24, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	b2 9f       	mul	r27, r18
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
